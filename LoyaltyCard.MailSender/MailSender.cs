using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Net.Mime;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace LoyaltyCard.MailSender
{
    // TODO: store already parsed config in static field
    // TODO: in mail template, use image path instead of cid -> cid will be generated by mail sender
    public class MailSender
    {
        //https://stackoverflow.com/questions/2317012/attaching-image-in-the-body-of-mail-in-c-sharp
        //http://www.theukwebdesigncompany.com/articles/entity-escape-characters.php

        public async Task SendHappyBirthdayMailAsync(string recipientMail, string firstName, DateTime? birthDate)
        {
            try
            {
                string senderMail = GetConfigValue("SenderMail");
                string senderPassword = GetConfigValue("SenderPassword");

                MailAddress fromAddress = new MailAddress(senderMail, "PPC SPRL");
                MailAddress toAddress = new MailAddress(recipientMail, firstName ?? "vous");
                using (SmtpClient client = new SmtpClient
                {
                    Host = "smtp.gmail.com",
                    Port = 587,
                    EnableSsl = true,
                    DeliveryMethod = SmtpDeliveryMethod.Network,
                    UseDefaultCredentials = false,
                    Credentials = new NetworkCredential(fromAddress.Address, senderPassword)
                })
                {

                    using (var message = new MailMessage(fromAddress, toAddress)
                    {
                        Subject ="Joyeux anniversaire de la part de l'équipe PPC",
                        Body = BuildBirthDayBody(firstName, birthDate),
                        IsBodyHtml = true,
                    })
                    {
                        string logoAttachmentPath = Path.Combine(ConfigurationManager.AppSettings["MailPicturesPath"], "logo+nom.png");
                        Attachment logoInline = new Attachment(logoAttachmentPath);
                        logoInline.ContentDisposition.Inline = true;
                        logoInline.ContentDisposition.DispositionType = DispositionTypeNames.Inline;
                        logoInline.ContentId = "logo";
                        logoInline.ContentType.MediaType = "image/png";
                        logoInline.ContentType.Name = Path.GetFileName(logoAttachmentPath);
                        message.Attachments.Add(logoInline);

                        string bdayAttachmentPath = Path.Combine(ConfigurationManager.AppSettings["MailPicturesPath"], "birthday.jpg");
                        Attachment bdayInline = new Attachment(bdayAttachmentPath);
                        bdayInline.ContentDisposition.Inline = true;
                        bdayInline.ContentDisposition.DispositionType = DispositionTypeNames.Inline;
                        bdayInline.ContentId = "birthday";
                        bdayInline.ContentType.MediaType = "image/jpg";
                        bdayInline.ContentType.Name = Path.GetFileName(bdayAttachmentPath);
                        message.Attachments.Add(bdayInline);

                        await client.SendMailAsync(message);
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        public async Task SendNewClientMailAsync(string recipientMail, string firstName)
        {
            try
            {
                string senderMail = GetConfigValue("SenderMail");
                string senderPassword = GetConfigValue("SenderPassword");

                MailAddress fromAddress = new MailAddress(senderMail, "PPC SPRL");
                MailAddress toAddress = new MailAddress(recipientMail, firstName ?? "vous");
                using (SmtpClient client = new SmtpClient
                {
                    Host = "smtp.gmail.com",
                    Port = 587,
                    EnableSsl = true,
                    DeliveryMethod = SmtpDeliveryMethod.Network,
                    UseDefaultCredentials = false,
                    Credentials = new NetworkCredential(fromAddress.Address, senderPassword)
                })
                {

                    using (var message = new MailMessage(fromAddress, toAddress)
                    {
                        Subject = "Félicitations de la part de l'équipe PPC",
                        Body = BuildNewClientBody(firstName),
                        IsBodyHtml = true,
                    })
                    {
                        string congratulationsAttachmentPath = Path.Combine(ConfigurationManager.AppSettings["MailPicturesPath"], "congratulations.jpg");
                        Attachment congratulationsInline = new Attachment(congratulationsAttachmentPath);
                        congratulationsInline.ContentDisposition.Inline = true;
                        congratulationsInline.ContentDisposition.DispositionType = DispositionTypeNames.Inline;
                        congratulationsInline.ContentId = "congratulations";
                        congratulationsInline.ContentType.MediaType = "image/jpg";
                        congratulationsInline.ContentType.Name = Path.GetFileName(congratulationsAttachmentPath);
                        message.Attachments.Add(congratulationsInline);

                        string logoAttachmentPath = Path.Combine(ConfigurationManager.AppSettings["MailPicturesPath"], "logo+nom.png");
                        Attachment logoInline = new Attachment(logoAttachmentPath);
                        logoInline.ContentDisposition.Inline = true;
                        logoInline.ContentDisposition.DispositionType = DispositionTypeNames.Inline;
                        logoInline.ContentId = "logo";
                        logoInline.ContentType.MediaType = "image/png";
                        logoInline.ContentType.Name = Path.GetFileName(logoAttachmentPath);
                        message.Attachments.Add(logoInline);

                        await client.SendMailAsync(message);
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        public async Task SendVoucherMailAsync(string recipientMail, string firstName, decimal discount)
        {
            try
            {
                string senderMail = GetConfigValue("SenderMail");
                string senderPassword = GetConfigValue("SenderPassword");

                MailAddress fromAddress = new MailAddress(senderMail, "PPC SPRL");
                MailAddress toAddress = new MailAddress(recipientMail, firstName ?? "vous");
                using (SmtpClient client = new SmtpClient
                {
                    Host = "smtp.gmail.com",
                    Port = 587,
                    EnableSsl = true,
                    DeliveryMethod = SmtpDeliveryMethod.Network,
                    UseDefaultCredentials = false,
                    Credentials = new NetworkCredential(fromAddress.Address, senderPassword)
                })
                {

                    using (var message = new MailMessage(fromAddress, toAddress)
                    {
                        Subject = "Bon de réduction chez PPC",
                        Body = BuildVoucherBody(firstName, discount),
                        IsBodyHtml = true,
                    })
                    {
                        string presentAttachmentPath = Path.Combine(ConfigurationManager.AppSettings["MailPicturesPath"], "present.png");
                        Attachment presentInline = new Attachment(presentAttachmentPath);
                        presentInline.ContentDisposition.Inline = true;
                        presentInline.ContentDisposition.DispositionType = DispositionTypeNames.Inline;
                        presentInline.ContentId = "present";
                        presentInline.ContentType.MediaType = "image/png";
                        presentInline.ContentType.Name = Path.GetFileName(presentAttachmentPath);
                        message.Attachments.Add(presentInline);

                        string logoAttachmentPath = Path.Combine(ConfigurationManager.AppSettings["MailPicturesPath"], "logo+nom.png");
                        Attachment logoInline = new Attachment(logoAttachmentPath);
                        logoInline.ContentDisposition.Inline = true;
                        logoInline.ContentDisposition.DispositionType = DispositionTypeNames.Inline;
                        logoInline.ContentId = "logo";
                        logoInline.ContentType.MediaType = "image/png";
                        logoInline.ContentType.Name = Path.GetFileName(logoAttachmentPath);
                        message.Attachments.Add(logoInline);

                        await client.SendMailAsync(message);
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        private string GetConfigValue(string key)
        {
            string configFileName = ConfigurationManager.AppSettings["ConfigFile"];
            XDocument document = XDocument.Load(configFileName);
            string value = document.Root?.Elements("add").FirstOrDefault(e => e.Attribute("key")?.Value == key)?.Attribute("value")?.Value;
            return value;
        }

        private string BuildBirthDayBody(string firstName, DateTime? birthDay)
        {
            string path = Path.Combine(ConfigurationManager.AppSettings["MailTemplatesPath"], "birthday.html");
            string body = File.ReadAllText(path).Replace("\t", string.Empty).Replace(Environment.NewLine, string.Empty);
            // Replace first name
            if (!string.IsNullOrWhiteSpace(firstName))
                body = body.Replace("[firstname]", " " + firstName);
            else
                body = body.Replace("[firstname]", string.Empty);
            // Replace max validity
            DateTime maxValidity = (birthDay ?? DateTime.Today).AddMonths(1);
            body = body.Replace("[maxvalidity]", $"{maxValidity:dd/MM/yyyy}");
            //
            return body;
        }

        private string BuildNewClientBody(string firstName)
        {
            string path = Path.Combine(ConfigurationManager.AppSettings["MailTemplatesPath"], "newclient.html");
            string body = File.ReadAllText(path).Replace("\t", string.Empty).Replace(Environment.NewLine, string.Empty);
            // Replace first name
            if (!string.IsNullOrWhiteSpace(firstName))
                body = body.Replace("[firstname]", " " + firstName);
            else
                body = body.Replace("[firstname]", string.Empty);
            //
            return body;
        }

        private string BuildVoucherBody(string firstName, decimal discount)
        {
            string path = Path.Combine(ConfigurationManager.AppSettings["MailTemplatesPath"], "voucher.html");
            string body = File.ReadAllText(path).Replace("\t", string.Empty).Replace(Environment.NewLine, string.Empty);
            // Replace first name
            if (!string.IsNullOrWhiteSpace(firstName))
                body = body.Replace("[firstname]", " " + firstName);
            else
                body = body.Replace("[firstname]", string.Empty);
            // Replace discount
            body = body.Replace("[discount]", $"{discount}%");
            return body;
        }
    }
}
